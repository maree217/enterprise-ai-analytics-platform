name: Production Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run linting
      run: |
        black --check src/
        flake8 src/
        mypy src/
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          --junitxml=pytest-report.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          htmlcov/
          bandit-report.json
          safety-report.json
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  model-validation:
    name: ML Model Validation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install ML dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Validate ML Models
      run: |
        python scripts/validate_models.py
        python scripts/test_model_endpoints.py
    
    - name: Run data validation
      run: |
        python scripts/validate_data_pipelines.py
    
    - name: Performance benchmarking
      run: |
        python scripts/benchmark_models.py --output=benchmark-report.json
    
    - name: Upload model validation results
      uses: actions/upload-artifact@v3
      with:
        name: model-validation-results
        path: |
          model-validation-report.json
          benchmark-report.json

  security-scan:
    name: Security & Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    needs: [test, model-validation]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        image: [api, ml, worker, dashboard]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.${{ matrix.image }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group eaap-staging-rg --name eaap-staging-aks
    
    - name: Deploy to AKS Staging
      run: |
        helm upgrade --install eaap-staging ./helm/eaap \
          --namespace eaap-staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set ingress.hosts[0].host=eaap-staging.aicapabilitybuilder.com \
          --wait --timeout=600s
    
    - name: Run integration tests
      run: |
        python scripts/integration_tests.py --environment=staging --base-url=https://eaap-staging.aicapabilitybuilder.com
    
    - name: Run smoke tests
      run: |
        python scripts/smoke_tests.py --environment=staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group eaap-prod-rg --name eaap-prod-aks
    
    - name: Deploy to Production with Blue-Green
      run: |
        # Deploy to blue environment first
        helm upgrade --install eaap-blue ./helm/eaap \
          --namespace eaap-production \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set deployment.suffix=blue \
          --set service.port=8080 \
          --set replicas.api=5 \
          --set replicas.ml=3 \
          --set replicas.worker=2 \
          --wait --timeout=900s
        
        # Run production smoke tests
        python scripts/smoke_tests.py --environment=production --port=8080
        
        # Switch traffic to blue deployment
        kubectl patch service eaap-production -p '{"spec":{"selector":{"deployment":"eaap-blue"}}}'
        
        # Clean up old green deployment after successful switch
        helm uninstall eaap-green --namespace eaap-production || true
        
        # Rename blue to green for next deployment
        kubectl patch deployment eaap-blue -p '{"metadata":{"name":"eaap-green"}}'
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/eaap-production -n eaap-production
        python scripts/production_health_check.py --retries=10 --delay=30
    
    - name: Update monitoring and alerting
      run: |
        python scripts/update_monitoring.py --version=${{ github.sha }} --environment=production

  performance-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install testing dependencies
      run: |
        pip install locust pytest-benchmark
    
    - name: Run load tests
      run: |
        locust -f tests/performance/locustfile.py \
          --host=https://eaap-staging.aicapabilitybuilder.com \
          --users=100 \
          --spawn-rate=10 \
          --run-time=5m \
          --headless \
          --html=load-test-report.html
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          load-test-report.html
          performance-benchmark.json